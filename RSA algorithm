#include <stdio.h>
#include <string.h>
#include <math.h>
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int mod_inverse(int e, int phi) {
    for (int d = 1; d < phi; d++) {
        if ((e * d) % phi == 1)
            return d;
    }
    return -1;
}

long long mod_pow(long long base, long long exp, long long mod) {
    long long result = 1;
    base %= mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int main() {
    int p = 17, q = 11;       
    int n = p * q;             
    int phi = (p - 1) * (q - 1); 

    int e = 7;  
    if (gcd(e, phi) != 1) {
        printf("e is not coprime with phi(n).\n");
        return 1;
    }

    int d = mod_inverse(e, phi);
    if (d == -1) {
        printf("Modular inverse of e does not exist.\n");
        return 1;
    }
    printf("Public Key:  (e = %d, n = %d)\n", e, n);
    printf("Private Key: (d = %d, n = %d)\n", d, n);
    char message[100];
    printf("Enter message to encrypt: ");
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = '\0'; 
    int len = strlen(message);
    long long encrypted[100];
    char decrypted[100];
    printf("Encrypted values:\n");
    for (int i = 0; i < len; i++) {
        encrypted[i] = mod_pow(message[i], e, n);
        printf("%lld ", encrypted[i]);
    }
    printf("\n");
    printf("Decrypted message:\n");
    for (int i = 0; i < len; i++) {
        decrypted[i] = (char)mod_pow(encrypted[i], d, n);
    }
    decrypted[len] = '\0';
    printf("%s\n", decrypted);

    return 0;
}

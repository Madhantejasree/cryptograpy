#include <stdio.h>
#include <string.h>
#include <stdbool.h>

void encryptRailFence(char *text, int key, char *cipher) {
    int len = strlen(text);
    char rail[key][len];

    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = '\n';

    bool down = false;
    int row = 0;

    for (int i = 0; i < len; i++) {
        rail[row][i] = text[i];

        if (row == 0 || row == key - 1)
            down = !down;

        row += down ? 1 : -1;
    }

    int idx = 0;
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] != '\n')
                cipher[idx++] = rail[i][j];

    cipher[idx] = '\0';
}
void decryptRailFence(char *cipher, int key, char *result) {
    int len = strlen(cipher);
    char rail[key][len];

    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = '\n';

    bool down;
    int row = 0;
    for (int i = 0; i < len; i++) {
        if (row == 0)
            down = true;
        if (row == key - 1)
            down = false;

        rail[row][i] = '*';

        row += down ? 1 : -1;
    }

    int idx = 0;
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] == '*' && idx < len)
                rail[i][j] = cipher[idx++];

    row = 0;
    for (int i = 0; i < len; i++) {
        result[i] = rail[row][i];

        if (row == 0)
            down = true;
        if (row == key - 1)
            down = false;

        row += down ? 1 : -1;
    }

    result[len] = '\0';
}

int main() {
    char text[100], cipher[100], decrypted[100];
    int key;

    printf("Enter message: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0';

    printf("Enter key (number of rails): ");
    scanf("%d", &key);

    encryptRailFence(text, key, cipher);
    printf("Encrypted: %s\n", cipher);

    decryptRailFence(cipher, key, decrypted);
    printf("Decrypted: %s\n", decrypted);

    return 0;
}
